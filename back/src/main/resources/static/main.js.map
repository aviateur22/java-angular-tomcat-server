{"version":3,"file":"main.js","mappings":"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","sources":["./src/app/app-routing.module.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/components/flash-message/flash-message.component.ts","./src/app/components/flash-message/flash-message.component.html","./src/app/components/navbar/navbar.component.ts","./src/app/components/navbar/navbar.component.html","./src/app/http.interceptor.ts","./src/app/modules/auth/auth.module.ts","./src/app/modules/auth/directives/show-on-focus.directive.ts","./src/app/modules/auth/models/captcha.model.ts","./src/app/modules/auth/models/login-dto.model.ts","./src/app/modules/auth/pages/login-page/login-page.component.ts","./src/app/modules/auth/pages/login-page/login-page.component.html","./src/app/modules/auth/pages/register-page/register-page.component.ts","./src/app/modules/auth/pages/register-page/register-page.component.html","./src/app/modules/auth/routes/auth.routing.ts","./src/app/modules/auth/services/auth.service.ts","./src/app/modules/auth/store/auth-store/action.ts","./src/app/modules/auth/store/auth-store/effect.ts","./src/app/modules/auth/store/auth-store/reducer.ts","./src/app/modules/auth/store/auth-store/selector.ts","./src/app/modules/auth/validators/password.validator.ts","./src/app/pages/error-page/error-page.component.ts","./src/app/pages/error-page/error-page.component.html","./src/app/pages/home-page/home-page.component.ts","./src/app/pages/home-page/home-page.component.html","./src/app/pages/not-found-page/not-found-page.component.ts","./src/app/pages/not-found-page/not-found-page.component.html","./src/app/pages/user-page/user-page.component.ts","./src/app/pages/user-page/user-page.component.html","./src/app/services/home.service.ts","./src/app/services/user.service.ts","./src/app/utils/messages/login-page-message.ts","./src/app/utils/messages/message-utils.ts","./src/app/utils/messages/register-page-message.ts","./src/environments/environment.dev.ts","./src/main.ts","./src/store/app.state.ts","./src/store/flash-message-store/action.ts","./src/store/flash-message-store/effect.ts","./src/store/flash-message-store/reducer.ts","./src/store/flash-message-store/selector.ts","./src/store/user-ident-store/action.ts","./src/store/user-ident-store/effect.ts","./src/store/user-ident-store/reducer.ts","./src/store/user-ident-store/selector.ts"],"sourcesContent":["import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { HomePageComponent } from './pages/home-page/home-page.component';\nimport { NotFoundPageComponent } from './pages/not-found-page/not-found-page.component';\nimport { UserPageComponent } from './pages/user-page/user-page.component';\nimport { environment } from 'src/environments/environment';\nimport { ErrorPageComponent } from './pages/error-page/error-page.component';\n\nconst routes: Routes = [\n  {\n    path: environment.webapp_path,\n    children: [\n      { path: \"\", component: HomePageComponent, title: \"Accueil\"},\n      { path: \"error\", component: ErrorPageComponent, title: \"Erreur\"},\n      { path: \"users-page\", component: UserPageComponent, title: \"Page users\"},\n      { path: \"not-found-page\", component: NotFoundPageComponent, title: \"404\"}\n    ]\n\n  },\n  { path: \"\", redirectTo: environment.webapp_path, pathMatch: \"full\"},\n  { path: \"**\", redirectTo:\"not-found-page\", title: '404'}\n];\n\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'lalamiam';\n}\n","<app-flash-message></app-flash-message>\n<app-navbar></app-navbar>\n\n<router-outlet></router-outlet>\n","import { isDevMode, NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { HTTP_INTERCEPTORS, HttpClientModule } from '@angular/common/http';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { StoreDevtoolsModule } from '@ngrx/store-devtools';\nimport { StoreModule } from '@ngrx/store';\nimport { EffectsModule } from '@ngrx/effects';\nimport { reducers } from 'src/store/app.state';\nimport { UserEffect } from 'src/store/user-ident-store/effect';\nimport { FlashMessageEffect } from 'src/store/flash-message-store/effect';\nimport { HandlerHttpInterceptor } from './http.interceptor';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { NavbarComponent } from './components/navbar/navbar.component';\nimport { HomePageComponent } from './pages/home-page/home-page.component';\nimport { NotFoundPageComponent } from './pages/not-found-page/not-found-page.component';\nimport { UserPageComponent } from './pages/user-page/user-page.component';\nimport { FlashMessageComponent } from './components/flash-message/flash-message.component';\nimport { ErrorPageComponent } from './pages/error-page/error-page.component';\nimport { AuthModule } from './modules/auth/auth.module';\n\nimport { InputTextModule } from 'primeng/inputtext';\nimport { MessageModule } from 'primeng/message';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    NavbarComponent,\n    HomePageComponent,\n    NotFoundPageComponent,\n    UserPageComponent,\n    FlashMessageComponent,\n    ErrorPageComponent\n  ],\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    HttpClientModule,\n    FormsModule,\n    ReactiveFormsModule,\n    AppRoutingModule,\n    AuthModule,\n    StoreModule.forRoot(reducers),\n    EffectsModule.forRoot([UserEffect, FlashMessageEffect]),\n    StoreDevtoolsModule.instrument({ maxAge: 25, logOnly: !isDevMode(), serialize: {\n      replacer: (_key, value) => (typeof value === \"bigint\" ? value.toString() : value)\n    }\n  }),\n  InputTextModule,\n  MessageModule\n  ],\n  providers: [\n    {provide: HTTP_INTERCEPTORS, useClass:HandlerHttpInterceptor, multi: true }\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { AppState } from 'src/store/app.state';\nimport { messageSelector, isMessageErrorSelector } from 'src/store/flash-message-store/selector';\n\n@Component({\n  selector: 'app-flash-message',\n  templateUrl: './flash-message.component.html',\n  styleUrls: ['./flash-message.component.css']\n})\nexport class FlashMessageComponent {\n\n  message$: Observable<string>;\n  isErrorMessage$: Observable<boolean>\n\n  constructor(private _store: Store<AppState>) {\n    this.message$ = this._store.pipe(select(messageSelector));\n    this.isErrorMessage$ = this._store.pipe(select(isMessageErrorSelector));\n\n  }\n}\n","<div class=\"absolute flex justify-content-center w-full\" *ngIf=\"(message$ | async) as message\">\n  <div *ngIf=\"(isErrorMessage$ | async) as isErrorMessage; else elseBlock\">\n    <p-message class=\"p-message\" severity=\"error\" [text]=\"message\" ></p-message>\n    <p>ici{{isErrorMessage}}</p>\n  </div>\n  <ng-template #elseBlock>\n    <p-message class=\"p-message\" severity=\"success\" [text]=\"message\" ></p-message>\n</ng-template>\n</div>\n","import { Component } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { AppState } from 'src/store/app.state';\nimport { getEmailSelector } from 'src/store/user-ident-store/selector';\nimport * as Action from 'src/app/modules/auth/store/auth-store/action'\nimport { environment } from 'src/environments/environment';\n\n@Component({\n  selector: 'app-navbar',\n  templateUrl: './navbar.component.html',\n  styleUrls: ['./navbar.component.css']\n})\nexport class NavbarComponent {\n\n  userEmail$: Observable<string>;\n\n   /**\n   * Path pour afficher la web_app\n   */\n  webappPath: string = environment.webapp_path;\n\n  homeLink!: string;\n  userLink!: string;\n  registerLink!: string;\n  loginLink!: string\n\n\n  constructor(private _store: Store<AppState>) {\n    this.userEmail$ = this._store.pipe(select(getEmailSelector));\n\n  }\n\n  ngOnInit() {\n    this.homeLink = `/${this.webappPath}`;\n    this.userLink = `/${this.webappPath}/users-page`;\n    this.loginLink = `/${this.webappPath}/connexion`;\n  }\n\n  logout() {\n    this._store.dispatch(Action.logout())\n  }\n\n}\n","<nav class=\"navbar\">\n  <div class=\"navbar-logo\">\n    <img class=\"small\" src=\"assets/hamburger.jpg\" alt=\"My App Logo\" />\n  </div>\n  <ul class=\"navbar-links\">\n      <li><a [routerLink]= homeLink>Home</a></li>\n      <li><a [routerLink]=userLink>users</a></li>\n      <li><a [routerLink]=loginLink>connexion</a></li>\n  </ul>\n\n  <div *ngIf=\"(userEmail$ | async) as user\">\n    <button (click)=\"logout()\">\n      deconnexion\n    </button>\n  </div>\n</nav>\n","import { Injectable, Injector } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor,\n  HttpResponse,\n  HttpErrorResponse\n} from '@angular/common/http';\nimport { Observable, tap } from 'rxjs';\nimport { Router } from '@angular/router';\nimport { environment } from 'src/environments/environment';\n\n\n@Injectable()\nexport class HandlerHttpInterceptor implements HttpInterceptor {\n\n  constructor(private _injector: Injector) {}\n\n  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\n\n    if(request.urlWithParams.includes('/api/')){\n      const token: string| null = localStorage.getItem('token');\n      const formToken: string|null = localStorage.getItem('form-csrf-token');\n      request = request.clone({\n        withCredentials: true,\n        setHeaders: {\n          authorization: `Bearer ${token}`,\n          'Content-Type': 'application/json',\n          'Form-Csrf-Token': formToken === null ? '-' : formToken\n        }\n      });\n    }\n    return next.handle(request).pipe(\n      tap(event=>{\n        if(event instanceof HttpResponse) {\n          const csrfToken = event.headers.get('form-csrf-token');\n          if (csrfToken) {\n            localStorage.setItem('form-csrf-token', csrfToken);\n          }\n        }\n      }),\n      tap({\n        error: (error: HttpErrorResponse)=>{\n          const errorStatus: number = error.status;\n          const router = this._injector.get(Router);\n          const webapp_path: string = environment.webapp_path !== '' ?\n          environment.webapp_path+'/' : '';\n          switch(errorStatus) {\n            case 0: {\n              console.log('erreur: 0: ', error.status);\n              router.navigate([`${webapp_path}error`]);\n              break;\n            }\n            case 401: {\n              console.log('erreur: 401: ', error.message);\n              router.navigate([`${webapp_path}connexion`]);\n              break;\n            }\n            case 403: {\n\n              console.log('error 403: ', 'error 403');\n              router.navigate([`${webapp_path}connexion`]);\n              break;\n            }\n            case 404: {\n              console.log('error 404: ', error.status);\n              router.navigate([\"not-found-page\"]);\n             break;\n            }\n          }\n        }\n      })\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\n\nimport { StoreModule } from '@ngrx/store';\nimport { EffectsModule } from '@ngrx/effects';\n\nimport { LoginPageComponent } from './pages/login-page/login-page.component';\nimport { RegisterPageComponent } from './pages/register-page/register-page.component';\nimport { authRouting } from './routes/auth.routing';\nimport { reducers as authReducer } from './store/auth-store/reducer';\nimport { AuthEffect } from './store/auth-store/effect';\nimport { AuthService } from './services/auth.service';\n\nimport { InputTextModule } from 'primeng/inputtext';\nimport { PasswordModule } from 'primeng/password';\nimport { MessagesModule } from 'primeng/messages';\nimport { MessageModule } from 'primeng/message';\nimport { ButtonModule } from 'primeng/button';\nimport { DividerModule } from 'primeng/divider';\nimport { ShowOnFocusDirective } from './directives/show-on-focus.directive';\n\n\n@NgModule({\n  declarations: [\n    LoginPageComponent,\n    RegisterPageComponent,\n    ShowOnFocusDirective\n  ],\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    RouterModule.forChild(authRouting),\n    StoreModule.forFeature('authState', authReducer),\n    EffectsModule.forFeature([\n      AuthEffect\n    ]),\n    InputTextModule,\n    PasswordModule,\n    MessagesModule,\n    ButtonModule,\n    MessageModule,\n    DividerModule\n  ],\n  providers: [AuthService]\n})\nexport class AuthModule { }\n","import { Directive, ElementRef, HostListener, Input, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { Password } from 'primeng/password';\n\n@Directive({\n  selector: '[appShowOnFocus]'\n})\nexport class ShowOnFocusDirective {\n\n  constructor(private _el: ElementRef, private _viewContainer: ViewContainerRef) { }\n\n  @Input('appShowOnFocus') templateRef!: TemplateRef<any>;\n\n  @HostListener('focusin', ['$event']) onFocus(event: FocusEvent) {\n    this._viewContainer.createEmbeddedView(this.templateRef);\n  }\n  @HostListener('focusout', ['$event']) onFocusOut(event: FocusEvent) {\n    this._viewContainer.clear();\n  }\n\n  private isPrimeNgPasswordInput(target: EventTarget | null): boolean {\n    return target instanceof HTMLInputElement && this._el.nativeElement.querySelector('input') === target;\n  }\n}\n","export class Captcha {\r\n  constructor(\r\n    public readonly image: string,\r\n    public readonly mimeType: string,\r\n    public readonly question: string,\r\n    public readonly response: string,\r\n  ) {}\r\n}\r\n","export class LoginDto {\r\n  constructor(public email: string, public password: string) {}\r\n}\r\n","import { Component } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { select, Store } from '@ngrx/store';\nimport * as AuthAction from '../../store/auth-store/action'\nimport { Observable } from 'rxjs';\nimport { AppState } from 'src/store/app.state';\n\nimport { LoginDto } from './../../models/login-dto.model';\nimport { isLoadingSelector } from '../../store/auth-store/selector';\nimport { MessageUtil } from 'src/app/utils/messages/message-utils';\nimport { environment } from 'src/environments/environment';\nimport loginPageMessage from 'src/app/utils/messages/login-page-message';\n\n@Component({\n  selector: 'app-login-page',\n  templateUrl: './login-page.component.html',\n  styleUrls: ['./login-page.component.css']\n})\nexport class LoginPageComponent {\n\n  loginDataFormGroup: FormGroup = new FormGroup({});\n  isLoading$: Observable<boolean>;\n\n  /**\n   * Path pour afficher la web_app\n   */\n  webappPath: string = environment.webapp_path;\n\n  /**\n   * Link page inscription\n   */\n  registerLink!: string;\n  /**\n   * Erreurs formulaire\n   */\n  errorMessages: Map<string, string> = new Map();\n\n  /**\n   * Info sur champs du formulaire   *\n   */\n  formInput: Map<string, string> = new Map();\n\n  constructor(private _fb: FormBuilder, private _store: Store<AppState>) {\n    this.isLoading$ = this._store.pipe(select(isLoadingSelector));\n\n  }\n\n  ngOnInit() {\n    this.registerLink =  `/${this.webappPath}/register`\n\n    this._store.dispatch(AuthAction.csrf());\n    this.initializeLoginData();\n    this.initializeFormMessages();\n  }\n\n  /**\n   * Initialisation FormBuilder\n   */\n  initializeLoginData() {\n    this.loginDataFormGroup = this._fb.group({\n      // Email\n      email: ['', Validators.required],\n\n      // Password\n      password: ['', Validators.required]\n    })\n  }\n\n  /**\n   * Chargement des données du Formulaire\n   */\n  initializeFormMessages() {\n    /**\n     * chargement des infos du formulaire\n     */\n    this.formInput = MessageUtil.loadMessageInMap(loginPageMessage.loginPage.information, environment.language)\n\n    /**\n     * Chargement des messages d'erreur\n     */\n    this.errorMessages = MessageUtil.loadMessageInMap(loginPageMessage.loginPage.error, environment.language);\n\n    }\n\n  /**\n   * Login\n   * @returns\n   */\n  login() {\n\n    if (!this.loginDataFormGroup.valid) {\n      return this.loginDataFormGroup.markAllAsTouched();\n    }\n\n    const logindata = new LoginDto(\n      this.loginDataFormGroup.get('email')?.value,\n      this.loginDataFormGroup.get('password')?.value\n    );\n\n    this._store.dispatch(AuthAction.login(logindata));\n\n  }\n\n}\n","<div class=\"flex flex-column align-items-center w-full\">\n  <form class=\"form--border flex flex-column align-items-center p-4 w-full m-w-500\" [formGroup]=\"loginDataFormGroup\" (submit)=\"login()\" >\n    <p class=\"text-base pt-6 pb-4 font-semibold\">{{formInput.get('title')}}</p>\n    <p-divider class=\"p-2 w-full\"></p-divider>\n\n    <!--Email-->\n    <div class=\"flex flex-column w-full pt-4\">\n      <label class=\"pb-1\" for=\"email\">{{formInput.get('email')}}</label>\n      <input style=\"border-color: var(--first_color)\" type=\"email\" pInputText id=\"email\" formControlName=\"email\" placeholder=\"votre email.\">\n\n       <!--Message erreur-->\n       <div *ngIf=\"loginDataFormGroup.get('email')?.touched && loginDataFormGroup.get('email')?.errors?.['required']\">\n        <p-message class=\"p-message\" severity=\"error\" [text]=\"errorMessages.get('emailMissing')\" ></p-message>\n      </div>\n    </div>\n\n    <!-- Mote de passe-->\n    <div class=\"flex flex-column w-full pt-4\">\n      <label class=\"pb-1\" for=\"password\">{{formInput.get('password')}}</label>\n      <p-password\n        id=\"password\"\n        [feedback]=\"false\"\n        [toggleMask]=\"true\"\n        formControlName=\"password\"\n        placeholder=\"mot de passe...\">\n      </p-password>\n\n      <!--Message erreur-->\n      <div *ngIf=\"loginDataFormGroup.get('password')?.touched && loginDataFormGroup.get('password')?.errors?.['required']\">\n        <p-message class=\"p-message\" severity=\"error\" [text]=\"errorMessages.get('passwordMissing')\" ></p-message>\n      </div>\n    </div>\n\n    <p-button class=\"pt-4\" type=\"submit\" label=\"connexion\"></p-button>\n    <div class=\"flex flex-column w-full pt-4\">\n      <p> {{formInput.get('register')}} </p> <a [routerLink]=registerLink>inscription</a>\n\n    </div>\n  </form>\n</div>\n","//@ts-nocheck\nimport { Component } from '@angular/core';\nimport { Store, select } from '@ngrx/store';\nimport * as AuthAction from '../../store/auth-store/action'\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { AppState } from 'src/store/app.state';\nimport { Observable } from 'rxjs';\nimport { Message } from 'primeng/api';\n\nimport { RegisterDto } from '../../models/register.dto';\nimport { Captcha } from '../../models/captcha.model';\nimport {  captchaSelector } from '../../store/auth-store/selector';\nimport { passwordValidator } from '../../validators/password.validator';\nimport { environment } from 'src/environments/environment';\nimport appMessage from 'src/app/utils/messages/register-page-message';\nimport { MessageUtil } from 'src/app/utils/messages/message-utils';\nimport { CaptchaClientResponseDto } from '../../models/captcha-client-response.dto';\nimport { AuthService } from '../../services/auth.service';\n\n@Component({\n  selector: 'app-register-page',\n  templateUrl: './register-page.component.html',\n  styleUrls: ['./register-page.component.css']\n})\nexport class RegisterPageComponent {\n\n  registerDataFormGroup: FormGroup = new FormGroup({});\n\n  /**\n   * Erreurs formulaire\n   */\n  errorMessages: Map<string, string> = new Map();\n\n  /**\n   * Info sur champs du formulaire   *\n   */\n  formInput: Map<string, string> = new Map();\n\n  /**\n   * Données pour le captcha\n   */\n  captcha$: Observable<Captcha|null>;\n\n  constructor(private _fb: FormBuilder, private _store: Store<AppState>, private _authService: AuthService){\n    this.captcha$ = _store.pipe(select(captchaSelector));\n  }\n\n  ngOnInit() {\n    this.initializeFormMessages();\n    this.initializeRegisterData();\n    this.initializeForm();\n  }\n\n  /**\n   * Formgroup Init\n   */\n  initializeRegisterData() {\n    this.registerDataFormGroup = this._fb.group({\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', Validators.required],\n      confirmPassword: ['', Validators.required],\n      name : ['', Validators.required],\n      captchaClientResponse: ['', Validators.required]\n    }, {\n      validators: passwordValidator()\n    })\n  }\n\n  /**\n   * CSRF + Captcha\n   */\n  initializeForm() {\n    this._store.dispatch(AuthAction.captcha());\n    this._store.dispatch(AuthAction.csrf());\n  }\n\n  initializeFormMessages() {\n\n    /**\n     * chargement des infos du formulaire\n     */\n    this.formInput = MessageUtil.loadMessageInMap(appMessage.registerPage.information, environment.language)\n\n    /**\n     * Chargement des messages d'erreur\n     */\n    this.errorMessages = MessageUtil.loadMessageInMap(appMessage.registerPage.error, environment.language);\n  }\n\n  register() {\n    if (!this.registerDataFormGroup.valid) {\n      return this.registerDataFormGroup.markAllAsTouched();\n    }\n\n    const email: string = this.registerDataFormGroup.get('email')?.value;\n    const password : string = this.registerDataFormGroup.get('password')?.value;\n    const name: string = this.registerDataFormGroup.get('name')?.value;\n    const captchaClientResponse: string = this.registerDataFormGroup.get('captchaClientResponse')?.value\n\n    const registerData: RegisterDto = this._authService.getRegisterDto(email, password, name, captchaClientResponse);\n\n    this._store.dispatch(AuthAction.register(registerData));\n\n  }\n\n}\n","<div class=\"flex flex-column align-items-center\">\n\n  <form class=\"form--border flex flex-column align-items-center p-4 w-full m-w-500\" [formGroup]=\"registerDataFormGroup\" (submit)=\"register()\">\n    <p class=\"text-base pt-6 pb-4 font-semibold\">{{formInput.get('title')}}</p>\n    <p-divider class=\"p-2 w-full\"></p-divider>\n\n    <!--Email-->\n    <div class=\"flex flex-column w-full pt-4\">\n      <label class=\"pb-1\" for=\"email\">{{formInput.get('email')}}</label>\n      <input style=\"border-color: var(--first_color)\" type=\"email\" pInputText id=\"email\" formControlName=\"email\" aria-describedby=\"email-help\" placeholder=\"votre email...\">\n      <div>\n        <ul>\n          <li *ngIf=\"registerDataFormGroup.get('email')?.touched && registerDataFormGroup.get('email')?.errors?.['required']\">\n            <p-message class=\"p-message\" severity=\"error\" [text]=\"errorMessages.get('emailMissing')\" ></p-message>\n          </li>\n          <li *ngIf=\"registerDataFormGroup.get('email')?.touched && registerDataFormGroup.get('email')?.errors?.['email']\">\n            <p-message class=\"p-message\" severity=\"error\" [text]=\"errorMessages.get('emailNotValid')\" ></p-message>\n          </li>\n        </ul>\n      </div>\n    </div>\n\n    <!--Nom-->\n    <div class=\"flex flex-column w-full pt-4\">\n      <label class=\"pb-1\" for=\"name\">{{formInput.get('name')}}</label>\n      <input\n        style=\"border-color: var(--first_color)\"\n        type=\"text\"\n        pInputText\n        aria-describedby=\"name\"\n        id=\"name\"\n        formControlName=\"name\"\n        placeholder=\"nom\">\n\n        <!--Message erreur-->\n        <div *ngIf=\"registerDataFormGroup.get('name')?.touched && registerDataFormGroup.get('name')?.errors?.['required']\">\n          <p-message class=\"p-message\" severity=\"error\" [text]=\"errorMessages.get('nameMissing')\" ></p-message>\n        </div>\n    </div>\n\n    <!--mot de pase-->\n    <div class=\"flex flex-column w-full pt-4\">\n      <div class=\"relative flex flex-column w-full\">\n        <label class=\"pb-1\" for=\"password\">{{formInput.get('password')}}</label>\n        <p-password\n        [appShowOnFocus]=\"passwordTemplate\"\n        id=\"password\"\n        aria-describedby=\"password-help\"\n        [feedback]=\"false\"\n        [toggleMask]=\"true\"\n        formControlName=\"password\"\n        placeholder=\"mot de passe...\">\n        <!--Template indicator-->\n        <ng-template #passwordTemplate>\n          <div class=\"absolute top-100 left-0 shadow-1 p-2 z-1 bg-white\">\n            <p class=\"mt-2 text-sm font-bold\">Contraintes</p>\n            <p-divider class=\"p-2\"></p-divider>\n            <ul class=\"pl-2 ml-2 mt-0\" style=\"line-height: 1.5\">\n                <li class=\"text-sm\"><i class=\"pi pi-caret-right\" style=\"font-size: 1rem; color: var(--first_color)\"></i>Au moins 1 caractère en miniscule</li>\n                <li class=\"text-sm\"><i class=\"pi pi-caret-right\" style=\"font-size: 1rem; color: var(--first_color)\"></i>Au moins 1 caractère en majiscule </li>\n                <li class=\"text-sm\"><i class=\"pi pi-caret-right\" style=\"font-size: 1rem; color: var(--first_color)\"></i>Au moins 1 chiffre</li>\n                <li class=\"text-sm\"><i class=\"pi pi-caret-right\" style=\"font-size: 1rem; color: var(--first_color)\"></i>Minimum 8 caractères</li>\n            </ul>\n          </div>\n        </ng-template>\n      </p-password>\n      </div>\n\n      <!--Message erreur-->\n      <div  *ngIf=\"registerDataFormGroup.get('password')?.touched && registerDataFormGroup.get('password')?.errors?.['required']\">\n        <p-message class=\"p-message\" severity=\"error\" [text]=\"errorMessages.get('passwordMissing')\" ></p-message>\n      </div>\n    </div>\n\n     <!-- confirmation mot de pase-->\n    <div class=\"flex flex-column w-full pt-4\">\n      <label class=\"pb-1\" for=\"password\">{{formInput.get('confirmPassword')}}</label>\n      <p-password\n        id=\"confirmPassword\"\n        aria-describedby=\"confirm-password-help\"\n        [feedback]=\"false\"\n        [toggleMask]=\"true\"\n        formControlName=\"confirmPassword\"\n        placeholder=\"mot de passe\">\n      </p-password>\n      <div>\n        <ul>\n          <li *ngIf=\"registerDataFormGroup.get('confirmPassword')?.touched && registerDataFormGroup.get('confirmPassword')?.errors?.['required']\">\n            <p-message class=\"p-message\" severity=\"error\" [text]=\"errorMessages.get('confirmPasswordMissing')\" ></p-message>\n          </li>\n          <li *ngIf=\"registerDataFormGroup.get('confirmPassword')?.touched && registerDataFormGroup.errors?.['passwordMismatch']\">\n            <p-message class=\"p-message\" severity=\"error\" [text]=\"errorMessages.get('confirmPasswordNotMatch')\" ></p-message>\n          </li>\n        </ul>\n      </div>\n    </div>\n\n    <!--captcha-->\n    <div class=\"flex flex-column w-full m-4 p-4 shadow-1\" *ngIf=\"(captcha$ | async) as captcha\">\n      <p class=\"mb-2\">{{captcha.question}}</p>\n      <div class=\"flex flex-column align-items-center mb-2\">\n        <img [src]=\"'data:' + captcha.mimeType + ';base64,' + captcha.image\">\n      </div>\n      <input pInputText style=\"border-color: var(--first_color)\" id=\"captchaClientResponse\" type=\"text\" formControlName=\"captchaClientResponse\">\n       <!--Message erreur-->\n       <div   *ngIf=\"registerDataFormGroup.get('captchaClientResponse')?.touched && registerDataFormGroup.get('captchaClientResponse')?.errors?.['required']\">\n        <p-message class=\"p-message\" severity=\"error\" [text]=\"errorMessages.get('captchaResponseMissing')\" ></p-message>\n      </div>\n    </div>\n\n\n    <p-button class=\"pt-4\" type=\"submit\" label=\"creation\"></p-button>\n  </form>\n\n</div>\n","import { Route } from \"@angular/router\";\r\nimport { LoginPageComponent } from \"../pages/login-page/login-page.component\";\r\nimport { RegisterPageComponent } from \"../pages/register-page/register-page.component\";\r\nimport { environment } from \"src/environments/environment\";\r\n\r\nexport const authRouting: Route[] = [\r\n  {\r\n    path: environment.webapp_path,\r\n    children: [\r\n      { path: \"connexion\", component: LoginPageComponent, title: \"Connexion\"},\r\n      { path: \"register\", component: RegisterPageComponent, title: \"Creation compte\"},\r\n    ]\r\n\r\n  }\r\n]\r\n","import { Injectable } from \"@angular/core\";\r\nimport { LoginDto } from \"../models/login-dto.model\";\r\nimport { map, Observable, of, tap } from \"rxjs\";\r\nimport { LoginResponseDto } from \"../models/login-response.dto\";\r\nimport { environment } from \"src/environments/environment\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { RegisterDto } from \"../models/register.dto\";\r\nimport { RegisterResponseDto } from \"../models/register-response.dto\";\r\nimport { Captcha } from \"../models/captcha.model\";\r\nimport { CaptchaDto } from \"../models/captcha.dto\";\r\nimport { CaptchaClientResponseDto } from \"../models/captcha-client-response.dto\";\r\n\r\n@Injectable({\r\n  providedIn:\"root\"\r\n})\r\nexport class AuthService {\r\n\r\n  private _apiEndPoint: string =  environment.api_base + \"/auth\";\r\n\r\n\r\n  constructor(private _http: HttpClient) {}\r\n\r\n  public login(loginDto: LoginDto): Observable<LoginResponseDto> {\r\n    return this._http.post<LoginResponseDto>(this._apiEndPoint + \"/login\", loginDto).pipe(\r\n      tap(loginResponse=>{\r\n        localStorage.setItem('user', JSON.stringify({\r\n          userId: loginResponse.id,\r\n          email: loginResponse.email,\r\n          jwt: loginResponse.jwt,\r\n          roles: loginResponse.roles\r\n        }))\r\n      })\r\n    )\r\n  }\r\n\r\n  public register(registerDto: RegisterDto): Observable<RegisterResponseDto> {\r\n    return this._http.post<RegisterResponseDto>(this._apiEndPoint + \"/register\",  registerDto)\r\n  }\r\n\r\n  public csrf(): Observable<string> {\r\n    const path = this._apiEndPoint + \"/csrf\";\r\n      return this._http.get(path,{\r\n      responseType: 'text' as const\r\n    });\r\n  }\r\n\r\n  public captcha(): Observable<Captcha> {\r\n    const path = this._apiEndPoint+ \"/captcha\";\r\n    return this._http.get<CaptchaDto>(path).pipe(\r\n      map(dto=>this.toCaptchaModel(dto))\r\n    )\r\n  }\r\n\r\n  public logout(): Observable<string> {\r\n    //const user = JSON.parse(localStorage.getItem('user'));\r\n\r\n    const user = localStorage.getItem('user');\r\n    let path:string= \"\";\r\n\r\n    if(user!=null)  {\r\n      const userString = JSON.parse(user);\r\n      const userId = userString.userId;\r\n      path = this._apiEndPoint + \"/logout/\" + userId;\r\n    }\r\n\r\n    return this._http.get(path,{\r\n      responseType: 'text' as const\r\n    });\r\n  }\r\n\r\n  private toCaptchaModel(dto: CaptchaDto): Captcha {\r\n    return new Captcha(dto.imageBase64, dto.imageMimeType, dto.question, dto.response);\r\n  }\r\n\r\n  /**\r\n   * Renvoi un RegisterDto\r\n   * @param email\r\n   * @param password\r\n   * @param name\r\n   * @param captchaClientResponse\r\n   * @returns RegisterDto\r\n   */\r\n  public getRegisterDto(email: string, password: string, name: string, captchaClientResponse: string): RegisterDto {\r\n    const captchaData: string | null = localStorage.getItem('captcha');\r\n    let captchaResponse: string = '';\r\n\r\n\r\n    if(captchaData != null) {\r\n      const captchaDataJson = JSON.parse(captchaData);\r\n      captchaResponse = captchaDataJson.response\r\n    }\r\n\r\n    // Récupération des données du captcha et réponse client\r\n    const captchaClientResponseDto: CaptchaClientResponseDto = {\r\n      captchaResponse,\r\n      clientResponse: captchaClientResponse\r\n    };\r\n\r\n    return  {\r\n      email,\r\n      password,\r\n      name,\r\n      captchaClientResponseDto\r\n    }\r\n  }\r\n}\r\n","import { createAction, props } from \"@ngrx/store\";\r\nimport { Captcha } from \"../../models/captcha.model\";\r\nimport { CaptchaClientResponseDto } from \"../../models/captcha-client-response.dto\";\r\n\r\nexport const login = createAction('[Auth] Login client', props<{email: string, password: string}>());\r\nexport const csrf = createAction('[Auth] csrf');\r\nexport const captcha = createAction('[Auth] get captcha')\r\nexport const captchaSuccess = createAction('[Auth] captcha success', props<{captcha: Captcha}>());\r\n\r\nexport const logout = createAction('[Auth] Logout');\r\nexport const logoutSuccess = createAction('[Auth] Logout success', props<{message: string}>());\r\nexport const logoutFailed = createAction('[Auth] Logout failed', props<{error: string, isErrorVisible: boolean}>());\r\n\r\nexport const register = createAction('[Auth] Register client', props<{email: string, password: string, name: string, captchaClientResponseDto: CaptchaClientResponseDto}>());\r\n","import { Injectable } from \"@angular/core\";\r\nimport { Actions, createEffect, ofType } from \"@ngrx/effects\";\r\nimport * as AuthAction from \"./action\";\r\nimport * as UserIdentAction from \"src/store/user-ident-store/action\";\r\nimport * as FlashMessageAction from 'src/store/flash-message-store/action';\r\n\r\nimport { catchError, from, map, mergeMap, of, switchMap } from \"rxjs\";\r\nimport { AuthService } from \"../../services/auth.service\";\r\n\r\n@Injectable()\r\nexport class AuthEffect {\r\n\r\n  constructor(private _action$: Actions, private _authService: AuthService){}\r\n\r\n  login$ = createEffect(()=>\r\n  this._action$.pipe(\r\n    ofType(AuthAction.login),\r\n    switchMap((data)=>\r\n      this._authService.login(data).pipe(\r\n        switchMap((loginResponse)=> [\r\n          // Creation du UserIdent\r\n          UserIdentAction.createUserIden({\r\n            userId: loginResponse.id,\r\n            email: loginResponse.email,\r\n            jwt: loginResponse.jwt,\r\n            roles: loginResponse.roles\r\n\r\n          }),\r\n\r\n          // Generation Message login\r\n          FlashMessageAction.createMessage({message: loginResponse.message, isError: false})\r\n        ]),\r\n        catchError((error)=>from([\r\n          UserIdentAction.clearUserIden(),\r\n          // Generation Message d'erreur\r\n          FlashMessageAction.createMessage({message: error.error.error, isError: true})\r\n        ])\r\n        )\r\n      )\r\n    )\r\n  )\r\n  )\r\n\r\n  register$ = createEffect(()=>\r\n    this._action$.pipe(\r\n      ofType(AuthAction.register),\r\n      mergeMap((data)=>\r\n        this._authService.register(data).pipe(\r\n          map((registerResponse)=>FlashMessageAction.createMessage({message: registerResponse.message, isError: false})),\r\n          catchError(error=> {\r\n            return of(\r\n              // Generation Message d'erreur\r\n              FlashMessageAction.createMessage({message: error.error.error, isError: true})\r\n            )\r\n          }\r\n        )\r\n        )\r\n      )\r\n    )\r\n  )\r\n\r\n  logout$ = createEffect(()=>\r\n    this._action$.pipe(\r\n      ofType(AuthAction.logout),\r\n      mergeMap(()=>\r\n        this._authService.logout().pipe(\r\n          switchMap((resMessage)=> {\r\n            localStorage.removeItem('user');\r\n            return [\r\n              // Suppression du UserIdent\r\n              UserIdentAction.clearUserIden(),\r\n\r\n              // Generation Message logout\r\n              FlashMessageAction.createMessage({message: resMessage, isError: false})\r\n            ]\r\n          }),\r\n          catchError((error)=>{\r\n            localStorage.removeItem('user');\r\n            return from([\r\n              // Suppression du UserIdent\r\n              UserIdentAction.clearUserIden(),\r\n\r\n              // Generation Message d'erreur\r\n              FlashMessageAction.createMessage({message: error.error.error, isError: true})\r\n            ])\r\n          }\r\n        )\r\n      )\r\n    )\r\n  ))\r\n\r\n  csrf$ = createEffect(()=>\r\n    this._action$.pipe(\r\n      ofType(AuthAction.csrf),\r\n      mergeMap(()=>\r\n        this._authService.csrf().pipe(\r\n          switchMap((csrf)=>[\r\n            // Generation Message Register\r\n            FlashMessageAction.createMessage({message: csrf, isError: false})\r\n          ]),\r\n          catchError(error=> {\r\n            return of(\r\n              // Generation Message d'erreur\r\n              FlashMessageAction.createMessage({message: error.error.error, isError: true})\r\n            )\r\n          }\r\n        )\r\n        )\r\n      )\r\n    )\r\n  )\r\n\r\n  captcha$ = createEffect(()=>\r\n    this._action$.pipe(\r\n      ofType(AuthAction.captcha),\r\n      mergeMap(()=>\r\n        this._authService.captcha().pipe(\r\n          map((captcha)=>{\r\n            const captchaString = JSON.stringify(captcha);\r\n            localStorage.setItem('captcha', captchaString)\r\n            return AuthAction.captchaSuccess({captcha})\r\n          }),\r\n          catchError(error=> {\r\n            return of(\r\n              // Generation Message d'erreur\r\n              FlashMessageAction.createMessage({message: error.error.error, isError: true})\r\n            )\r\n          })\r\n        )\r\n      )\r\n    )\r\n\r\n  )\r\n}\r\n","import { createReducer, on } from \"@ngrx/store\";\r\n\r\nimport * as AuthAction from \"./action\";\r\nimport { AuthModel } from \"./auth.model\";\r\n\r\nexport const initialState: AuthModel = {\r\n  error: '',\r\n  isErrorVisible: false,\r\n  isLoading: false,\r\n  captcha: null\r\n}\r\n\r\nexport const reducers = createReducer(\r\n  initialState,\r\n  on(AuthAction.login, (state)=>({...state, isLoading: true})),\r\n  on(AuthAction.register, (state)=>({...state, isLoading: true})),\r\n  on(AuthAction.captchaSuccess,(state, {captcha})=>({\r\n    ...state,\r\n    ...state.captcha, captcha\r\n  })\r\n)\r\n);\r\n","import { createSelector } from \"@ngrx/store\";\r\nimport { AppState } from \"src/store/app.state\";\r\n\r\nexport const selector = (state:AppState) => state.authState;\r\n\r\nexport const isErrorVisibleSelector = createSelector(selector, (state) => state.isErrorVisible);\r\nexport const isLoadingSelector = createSelector(selector, (state)=>state.isLoading)\r\nexport const errorMessageSelector = createSelector(selector, (state) => state.error);\r\nexport const captchaSelector = createSelector(selector, (state) => state.captcha);\r\nexport const captchaQuestionSelector = createSelector(selector, (state) => state.captcha?.question)\r\n","import { AbstractControl, ValidatorFn } from \"@angular/forms\";\r\n\r\nexport function passwordValidator(): ValidatorFn {\r\n  return (formGroup: AbstractControl):{[key: string]: boolean} | null => {\r\n    const password = formGroup.get('password')?.value;\r\n    const confirmPassword = formGroup.get('confirmPassword')?.value;\r\n\r\n    if (password !== confirmPassword) {\r\n\r\n      return { passwordMismatch: true };\r\n    }\r\n    return null;\r\n  }\r\n}\r\n","import { Component } from \"@angular/core\";\r\n\r\n@Component({\r\n  selector: 'app-error-page',\r\n  templateUrl: './error-page.component.html',\r\n  styleUrls: ['./error-page.component.css']\r\n})\r\nexport class ErrorPageComponent {\r\n\r\n}\r\n","<p>Erreur page</p>\r\n","import { Component } from '@angular/core';\nimport { HomeService } from 'src/app/services/home.service';\n\n@Component({\n  selector: 'app-home-page',\n  templateUrl: './home-page.component.html',\n  styleUrls: ['./home-page.component.css']\n})\nexport class HomePageComponent {\n\n  message: string = '';\n\n  constructor(private _homeService: HomeService) { }\n\n  ngOnInit() {\n    this._homeService.getHomeMessage().subscribe(\n      res=> this.message = res,\n      error => console.error('Erreur!', error)\n    );\n  }\n\n}\n","<p>home-page works!</p>\n\n<h2>Message du backend</h2>\n<p>{{message}}</p>\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-not-found-page',\n  templateUrl: './not-found-page.component.html',\n  styleUrls: ['./not-found-page.component.css']\n})\nexport class NotFoundPageComponent {\n\n}\n","<p>not-found-page works!</p>\n","import { Component } from '@angular/core';\nimport { UserService } from 'src/app/services/user.service';\n\n@Component({\n  selector: 'app-user-page',\n  templateUrl: './user-page.component.html',\n  styleUrls: ['./user-page.component.css']\n})\nexport class UserPageComponent {\n\n  message: string = '';\n\n  constructor(private _userService: UserService) {}\n\n  ngOnInit() {\n    this._userService.getUsers().subscribe(res=>this.message=res);\n  }\n\n}\n","<h2>PAge sur les utilisateurs</h2>\n\n<p>{{message}}</p>\n\n\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable, Version } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { environment } from 'src/environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HomeService {\n\n  private _apiEndPoint: string =  environment.api_base + \"/version\";\n\n  constructor(private _http: HttpClient) { }\n\n\n  public getHomeMessage(): Observable<string> {\n    return this._http.get(this._apiEndPoint, {\n      responseType: 'text' as const\n    })\n  }\n\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { environment } from 'src/environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n\n  private _apiEndPoint: string =  environment.api_base + \"/users\";\n\n  constructor(private _http: HttpClient) { }\n\n\n  public getUsers(): Observable<string> {\n    return this._http.get(this._apiEndPoint, {\n      responseType: 'text' as const\n    })\n  }\n}\n","export default {\r\n  loginPage: {\r\n    information: {\r\n      title: {\r\n        fr: 'Page de connexion',\r\n        en: 'Login page'\r\n      },\r\n      email: {\r\n        fr: 'Votre email',\r\n        en: 'Email'\r\n      },\r\n      password: {\r\n        fr: 'Votre mot de passe',\r\n        en: 'Your password'\r\n      },\r\n      register: {\r\n        fr: 'Pas encore de compte chez nous?',\r\n        en: 'Not yet register?'\r\n      }\r\n    },\r\n    error: {\r\n      emailMissing: {\r\n        fr: 'Email manquant',\r\n        en: 'Email missing'\r\n      },\r\n      emailNotValid: {\r\n        fr: 'Email non valide',\r\n        en: 'Email unvalid'\r\n      },\r\n      passwordMissing: {\r\n        fr: 'Mot de passe manquant',\r\n        en: 'Password missing'\r\n      }\r\n  },\r\n  }\r\n}\r\n","export class MessageUtil {\r\n\r\n  /**\r\n   * Remplie une map de string\r\n   * @returns Map<string, string>\r\n   */\r\n  public static loadMessageInMap(data: object, language: string): Map<string, string> {\r\n\r\n    const map: Map<string, string> = new Map();\r\n\r\n    function addEntriesInMap(data: object) {\r\n      Object.entries(data).forEach(([key, value])=>{\r\n        map.set(key,value[language]);\r\n      })\r\n    }\r\n\r\n    addEntriesInMap(data);\r\n\r\n    return map;\r\n  }\r\n}\r\n","export default {\r\n  registerPage: {\r\n    information: {\r\n      title: {\r\n        fr: 'Création compte',\r\n        en: 'Create account'\r\n      },\r\n      email: {\r\n        fr: 'Votre email',\r\n        en: 'Email'\r\n      },\r\n      name: {\r\n        fr: 'Votre pseudo',\r\n        en: 'Your nickname '\r\n      },\r\n      password: {\r\n        fr: 'Votre mot de passe',\r\n        en: 'Your password'\r\n      },\r\n      confirmPassword: {\r\n        fr: 'Confirmer votre mot de passe',\r\n        en: 'Confirm your password'\r\n      }\r\n    },\r\n    error: {\r\n      emailMissing: {\r\n        fr: 'Email manquant',\r\n        en: 'Email missing'\r\n      },\r\n      emailNotValid: {\r\n        fr: 'Email non valide',\r\n        en: 'Email unvalid'\r\n      },\r\n      nameMissing: {\r\n        fr: 'Nom manquant',\r\n        en: 'Name missing'\r\n      },\r\n      passwordMissing: {\r\n        fr: 'Mot de passe manquant',\r\n        en: 'Password missing'\r\n      },\r\n    confirmPasswordMissing: {\r\n      fr: 'Confirmation mot de passe manquant',\r\n      en: 'Confirm password missing'\r\n    },\r\n    confirmPasswordNotMatch: {\r\n      fr: 'Erreur confirmation mot de passe',\r\n      en: 'Confirm password unvalid'\r\n    },\r\n    captchaResponseMissing: {\r\n      fr: 'Réponse manquante',\r\n      en: 'Answer missing'\r\n    }\r\n  },\r\n  }\r\n}\r\n","import { EnvironmentRef } from \"./environment.ref\";\r\n\r\n/**\r\n * Dev - LocalServer\r\n */\r\nexport const environment: EnvironmentRef = {\r\n  production: false,\r\n  name: 'dev',\r\n  language: 'fr',\r\n  api_base: 'http://localhost:8080/api',\r\n  webapp_path: 'webapp'\r\n};\r\n","import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\n\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","import { ActionReducerMap } from \"@ngrx/store\";\r\nimport { reducers as AuthReducers } from './../app/modules/auth/store/auth-store/reducer';\r\nimport { reducers as UserIdentReducers } from './user-ident-store/reducer';\r\nimport { reducers as MessageReducers } from './flash-message-store/reducer';\r\nimport { AuthModel } from \"src/app/modules/auth/store/auth-store/auth.model\";\r\nimport { UserIdentModel } from \"./user-ident-store/user.ident.model\";\r\nimport { MessageModel } from \"./flash-message-store/message.model\";\r\n\r\nexport interface AppState {\r\n  userIdentState: UserIdentModel;\r\n  authState: AuthModel;\r\n  messageState: MessageModel\r\n}\r\n\r\nexport const reducers: ActionReducerMap<AppState> = {\r\n  userIdentState: UserIdentReducers,\r\n  authState: AuthReducers,\r\n  messageState: MessageReducers\r\n}\r\n","import { createAction, props } from \"@ngrx/store\";\r\n\r\nexport const createMessage = createAction('[message] create message', props<{ message: string, isError: boolean }>());\r\n\r\nexport const clearMessage = createAction('[message] clear message');\r\n","import { Injectable } from \"@angular/core\";\r\nimport { Actions, createEffect, ofType } from \"@ngrx/effects\";\r\n\r\nimport * as FlashMessageAction from './action';\r\nimport { delay, map } from \"rxjs\";\r\n\r\n@Injectable()\r\nexport class FlashMessageEffect {\r\n\r\n  constructor(private _action$: Actions){}\r\n\r\n  clear$ = createEffect(()=>\r\n    this._action$.pipe(\r\n      ofType(FlashMessageAction.createMessage),\r\n      delay(5000),\r\n      map(()=>FlashMessageAction.clearMessage())\r\n    )\r\n  )\r\n\r\n}\r\n","import { createReducer, on } from \"@ngrx/store\";\r\n\r\nimport * as MessageAction from \"./action\";\r\nimport { MessageModel } from \"./message.model\";\r\n\r\nexport const initialMessageState: MessageModel = {\r\n  message: '',\r\n  isError: false\r\n}\r\n\r\nexport const reducers = createReducer(\r\n  initialMessageState,\r\n  on(MessageAction.createMessage, (state, {message, isError})=>({...state, message, isError })),\r\n  on(MessageAction.clearMessage,(state)=>({...state, message: '', isError: false}))\r\n)\r\n\r\n","import { createSelector } from \"@ngrx/store\";\r\nimport { AppState } from \"../app.state\";\r\n\r\nexport const selector = (state: AppState) => state.messageState;\r\n\r\nexport const messageSelector = createSelector(selector, (state) => state.message);\r\nexport const isMessageErrorSelector = createSelector(selector, (state) => state.isError);\r\n\r\n","import { createAction, props } from \"@ngrx/store\";\r\n\r\nexport const createUserIden = createAction('[user] create user ident', props<{\r\n    userId: BigInt\r\n    email: string,\r\n    jwt:string,\r\n    roles:string[]\r\n  }>()\r\n);\r\n\r\nexport const clearUserIden = createAction('[user] clear user ident');\r\n","import { Injectable } from \"@angular/core\";\r\nimport { Actions, createEffect, ofType, ROOT_EFFECTS_INIT } from \"@ngrx/effects\";\r\nimport * as UserIdentAction from \"./action\";\r\n\r\nimport { map, tap } from \"rxjs\";\r\n\r\n@Injectable()\r\nexport class UserEffect {\r\n\r\n  constructor(private _action$: Actions){\r\n\r\n  }\r\n\r\n  init$ = createEffect(()=>\r\n    this._action$.pipe(\r\n      ofType(ROOT_EFFECTS_INIT),\r\n      tap(value=>{\r\n        console.log(value);\r\n      }),\r\n      map(()=>{\r\n\r\n        const userString = localStorage.getItem('user');\r\n        if(userString) {\r\n          console.log(\"ici, userinfo: \" + userString);\r\n          const user = JSON.parse(userString);\r\n\r\n          return UserIdentAction.createUserIden({\r\n            userId: user.userid,\r\n            email: user.email,\r\n            jwt: user.jwt,\r\n            roles: user.roles\r\n          })\r\n        }\r\n        return { type: '[user] clear user ident'}\r\n      })\r\n    )\r\n  );\r\n\r\n  clearUser$ = createEffect(()=>\r\n    this._action$.pipe(\r\n      ofType(UserIdentAction.clearUserIden),\r\n      map(()=>{\r\n        return UserIdentAction.createUserIden({\r\n          userId: BigInt(0),\r\n          jwt: '',\r\n          email: '',\r\n          roles: []\r\n        })\r\n      })\r\n    )\r\n  )\r\n\r\n\r\n}\r\n","import { createReducer, on } from \"@ngrx/store\";\r\n\r\nimport * as UserIdentAction from \"./action\";\r\nimport { UserIdentModel } from \"./user.ident.model\";\r\n\r\nexport const initialUserState: UserIdentModel = {\r\n  userId: BigInt(0),\r\n  token: '',\r\n  jwt: '',\r\n  email: '',\r\n  roles: []\r\n}\r\n\r\nexport const reducers = createReducer(\r\n  initialUserState,\r\n  on(UserIdentAction.createUserIden, (state, {email, jwt, userId, roles})=>({...state, email, jwt, userId, roles, token: ''})),\r\n  on(UserIdentAction.clearUserIden,(state)=>({...state, email: '', roles: [], userId: BigInt(0), jwt: '', token: ''}))\r\n)\r\n\r\n","import { createSelector } from \"@ngrx/store\";\r\nimport { AppState } from \"../app.state\";\r\n\r\nexport const selector = (state: AppState) => state.userIdentState;\r\n\r\nexport const getEmailSelector = createSelector(selector, (state) => state.email);\r\nexport const getJwtSelector = createSelector(selector, (state)=>state.jwt);\r\n"],"names":["RouterModule","HomePageComponent","NotFoundPageComponent","UserPageComponent","environment","ErrorPageComponent","routes","path","webapp_path","children","component","title","redirectTo","pathMatch","AppRoutingModule","_","_2","_3","forRoot","imports","i1","exports","AppComponent","constructor","selectors","decls","vars","template","AppComponent_Template","rf","ctx","i0","ɵɵelement","isDevMode","BrowserModule","BrowserAnimationsModule","HTTP_INTERCEPTORS","HttpClientModule","FormsModule","ReactiveFormsModule","StoreDevtoolsModule","StoreModule","EffectsModule","reducers","UserEffect","FlashMessageEffect","HandlerHttpInterceptor","NavbarComponent","FlashMessageComponent","AuthModule","InputTextModule","MessageModule","AppModule","bootstrap","provide","useClass","multi","instrument","maxAge","logOnly","serialize","replacer","_key","value","toString","declarations","StoreRootModule","i2","EffectsRootModule","i3","select","messageSelector","isMessageErrorSelector","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵproperty","message_r1","ɵɵtextInterpolate1","isErrorMessage_r5","ɵɵtemplate","FlashMessageComponent_div_0_div_1_Template","FlashMessageComponent_div_0_ng_template_3_Template","ɵɵtemplateRefExtractor","ɵɵpipeBind1","ctx_r0","isErrorMessage$","_r3","_store","message$","pipe","ɵɵdirectiveInject","Store","consts","FlashMessageComponent_Template","FlashMessageComponent_div_0_Template","getEmailSelector","Action","ɵɵlistener","NavbarComponent_div_13_Template_button_click_1_listener","ɵɵrestoreView","ctx_r2","ɵɵnextContext","ɵɵresetView","logout","webappPath","userEmail$","ngOnInit","homeLink","userLink","loginLink","dispatch","NavbarComponent_Template","NavbarComponent_div_13_Template","HttpResponse","tap","Router","_injector","intercept","request","next","urlWithParams","includes","token","localStorage","getItem","formToken","clone","withCredentials","setHeaders","authorization","handle","event","csrfToken","headers","get","setItem","error","errorStatus","status","router","console","log","navigate","message","ɵɵinject","Injector","factory","ɵfac","CommonModule","LoginPageComponent","RegisterPageComponent","authRouting","authReducer","AuthEffect","AuthService","PasswordModule","MessagesModule","ButtonModule","DividerModule","ShowOnFocusDirective","forChild","forFeature","StoreFeatureModule","EffectsFeatureModule","_el","_viewContainer","onFocus","createEmbeddedView","templateRef","onFocusOut","clear","isPrimeNgPasswordInput","target","HTMLInputElement","nativeElement","querySelector","ElementRef","ViewContainerRef","hostBindings","ShowOnFocusDirective_HostBindings","$event","ShowOnFocusDirective_focusout_HostBindingHandler","Captcha","image","mimeType","question","response","LoginDto","email","password","FormGroup","Validators","AuthAction","isLoadingSelector","MessageUtil","loginPageMessage","errorMessages","ctx_r1","_fb","loginDataFormGroup","Map","formInput","isLoading$","registerLink","csrf","initializeLoginData","initializeFormMessages","group","required","loadMessageInMap","loginPage","information","language","login","valid","markAllAsTouched","logindata","FormBuilder","LoginPageComponent_Template","LoginPageComponent_Template_form_submit_1_listener","LoginPageComponent_div_9_Template","LoginPageComponent_div_14_Template","ɵɵtextInterpolate","tmp_3_0","touched","errors","tmp_7_0","captchaSelector","passwordValidator","appMessage","ctx_r5","ctx_r6","ctx_r7","ctx_r10","RegisterPageComponent_div_34_div_6_Template","captcha_r9","ɵɵsanitizeUrl","tmp_2_0","ctx_r8","registerDataFormGroup","_authService","captcha$","initializeRegisterData","initializeForm","confirmPassword","name","captchaClientResponse","validators","captcha","registerPage","register","registerData","getRegisterDto","RegisterPageComponent_Template","RegisterPageComponent_Template_form_submit_1_listener","RegisterPageComponent_li_11_Template","RegisterPageComponent_li_12_Template","RegisterPageComponent_div_17_Template","RegisterPageComponent_ng_template_23_Template","RegisterPageComponent_div_25_Template","RegisterPageComponent_li_32_Template","RegisterPageComponent_li_33_Template","RegisterPageComponent_div_34_Template","tmp_4_0","tmp_6_0","tmp_11_0","tmp_15_0","tmp_16_0","map","_http","_apiEndPoint","api_base","loginDto","post","loginResponse","JSON","stringify","userId","id","jwt","roles","registerDto","responseType","dto","toCaptchaModel","user","userString","parse","imageBase64","imageMimeType","captchaData","captchaResponse","captchaDataJson","captchaClientResponseDto","clientResponse","HttpClient","providedIn","createAction","props","captchaSuccess","logoutSuccess","logoutFailed","createEffect","ofType","UserIdentAction","FlashMessageAction","catchError","from","mergeMap","of","switchMap","_action$","login$","data","createUserIden","createMessage","isError","clearUserIden","register$","registerResponse","logout$","resMessage","removeItem","csrf$","captchaString","Actions","createReducer","on","initialState","isErrorVisible","isLoading","state","createSelector","selector","authState","isErrorVisibleSelector","errorMessageSelector","captchaQuestionSelector","formGroup","passwordMismatch","ErrorPageComponent_Template","_homeService","getHomeMessage","subscribe","res","HomeService","HomePageComponent_Template","NotFoundPageComponent_Template","_userService","getUsers","UserService","UserPageComponent_Template","fr","en","emailMissing","emailNotValid","passwordMissing","addEntriesInMap","Object","entries","forEach","key","set","nameMissing","confirmPasswordMissing","confirmPasswordNotMatch","captchaResponseMissing","production","__NgCli_bootstrap_1","platformBrowser","bootstrapModule","catch","err","AuthReducers","UserIdentReducers","MessageReducers","userIdentState","messageState","clearMessage","delay","clear$","MessageAction","initialMessageState","ROOT_EFFECTS_INIT","init$","userid","type","clearUser$","BigInt","initialUserState","getJwtSelector"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}